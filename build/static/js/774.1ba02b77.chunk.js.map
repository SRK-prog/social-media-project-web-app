{"version":3,"file":"static/js/774.1ba02b77.chunk.js","mappings":"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","sources":["components/conversations/Conversation.jsx","../node_modules/@material-ui/icons/esm/DoneAll.js","components/message/Message.jsx","routes/chatapp/inputField.jsx","routes/chatapp/Conversations.jsx","hooks/usePrevious.jsx","routes/chatapp/Chatapp.jsx","../node_modules/@material-ui/icons/esm/ArrowBack.js","../node_modules/@material-ui/icons/esm/Send.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { DEFAULT_AVATAR } from \"../../constants/constants\";\r\nimport BASE_URL from \"../../api/baseUrl\";\r\n\r\nconst formatText = (conv, curtUserId) => {\r\n  if (!conv?.text) return \"\";\r\n  if (conv?.sender === curtUserId) return `You: ${conv?.text}`;\r\n  return conv?.text;\r\n};\r\n\r\nfunction Conversation({ conversation, currentUser, isActive, onSelect }) {\r\n  const [user, setUser] = useState({});\r\n\r\n  useEffect(() => {\r\n    const friendId = conversation.members.find((m) => m !== currentUser.userId);\r\n    (async () => {\r\n      try {\r\n        const { data } = await BASE_URL.get(\"/users\", {\r\n          params: { userId: friendId },\r\n        });\r\n        if (data?.response) setUser(data.response);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    })();\r\n    // eslint-disable-next-line\r\n  }, [currentUser]);\r\n\r\n  return (\r\n    <div\r\n      onClick={() => onSelect({ ...user, ...conversation, userId: user?._id })}\r\n      className={`flex items-center p-2.5 cursor-pointer hover:bg-gray-30 ${\r\n        isActive && \"bg-gray-20\"\r\n      }`}\r\n    >\r\n      <img\r\n        className=\"w-10 h-10 object-cover mr-5 rounded-full\"\r\n        src={user?.profilepicture || DEFAULT_AVATAR}\r\n        alt=\"\"\r\n      />\r\n      <div className=\"font-medium\">\r\n        <div>{user?.username}</div>\r\n        <div className=\"truncate w-40 text-xs\">\r\n          {formatText(conversation, currentUser._id)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Conversation;\r\n","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z\"\n}), 'DoneAll');","import { memo, useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { DoneAll } from \"@material-ui/icons\";\r\n\r\nconst formatDate = (date) => {\r\n  const today = new Date();\r\n  const isToday =\r\n    today.toLocaleDateString() === new Date(date).toLocaleDateString();\r\n  if (isToday) return moment(date).format(\"hh:mm a\");\r\n  return moment(date).format(\"DD-MM-YYYY hh:mm a\");\r\n};\r\n\r\nfunction Message({ message, own, showSent }) {\r\n  const [isSent, setIsSent] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (showSent)\r\n      message.promise.then((r) => r?.response?.sent).then(setIsSent);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`flex flex-col ${own && \"items-end\"} mt-2`}>\r\n      <div className={`max-w-xs flex`}>\r\n        <div\r\n          className={`px-2.5 py-1 rounded relative ${\r\n            own ? \"bg-blue-10 text-white\" : \"bg-gray-50\"\r\n          }`}\r\n        >\r\n          <div className=\"text-xs\">{formatDate(message?.createdAt)}</div>\r\n          <div className=\"md:text-base text-sm break-all\">{message?.text}</div>\r\n          {showSent && isSent && (\r\n            <div className=\"text-[14px] absolute text-white bottom-0.5 right-2\">\r\n              <DoneAll fontSize=\"inherit\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Message);\r\n","import React, { useState } from \"react\";\r\nimport { Send } from \"@material-ui/icons\";\r\n\r\nconst InputField = ({ onSubmit }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"px-4 mb-3 flex gap-3 h-12\">\r\n      <input\r\n        className=\"h-full flex-grow outline-1 outline outline-gray-100 rounded-full px-3\"\r\n        placeholder=\"Message...\"\r\n        onChange={(e) => setValue(e.target.value)}\r\n        value={value}\r\n      ></input>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"h-full w-20 text-white bg-blue-30 rounded-full grid place-content-center\"\r\n        onClick={handleSubmit}\r\n      >\r\n        <Send />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { ArrowBack } from \"@material-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Message from \"../../components/message/Message\";\r\nimport BASE_URL from \"../../api/baseUrl\";\r\nimport { DEFAULT_AVATAR } from \"../../constants/constants\";\r\nimport Utils from \"../../utils\";\r\nimport InputField from \"./inputField\";\r\nimport usePrevious from \"../../hooks/usePrevious\";\r\n\r\nconst Conversations = (props) => {\r\n  const {\r\n    onClose,\r\n    currentChat,\r\n    user,\r\n    receiverId,\r\n    incomingMessage,\r\n    onSent,\r\n    socket,\r\n  } = props;\r\n  const [isOnline, setIsOnline] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [justLeaved, setJustLeaved] = useState({ status: false, lastSeen: 0 });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const prevConvId = usePrevious(currentChat?._id);\r\n\r\n  const topEndRef = useRef(null);\r\n  const scrollRef = useRef(null);\r\n\r\n  const pageState = useRef({\r\n    total: 0,\r\n    page: 0,\r\n    loading: true,\r\n    conversationId: currentChat?._id,\r\n    receiverId: receiverId,\r\n  });\r\n\r\n  const setPageState = (obj) => {\r\n    pageState.current = { ...pageState.current, ...obj };\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.chatId = currentChat?._id;\r\n    setPageState({ conversationId: currentChat?._id, receiverId: receiverId });\r\n    // eslint-disable-next-line\r\n  }, [currentChat?._id, receiverId]);\r\n\r\n  const totalPages = useRef(0);\r\n  const pageCount = useRef(0);\r\n\r\n  const fetchMessages = async (params) => {\r\n    try {\r\n      updateLoading(true);\r\n      const {\r\n        data: { data, total },\r\n      } = await BASE_URL.get(\"/messages/get-messages\", { params });\r\n      return [data, total];\r\n    } catch (error) {\r\n      console.error(\"fetchMessages:- \", error);\r\n    } finally {\r\n      updateLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if ((prevConvId || \"\") !== currentChat?._id) {\r\n        setMessages([]);\r\n        pageCount.current = 0;\r\n        totalPages.current = 0;\r\n      }\r\n      const [data, total] = await fetchMessages({\r\n        skip: pageCount.current,\r\n        limit: 30,\r\n        conversationId: currentChat?._id,\r\n      });\r\n      totalPages.current = total;\r\n      setMessages(data);\r\n    })();\r\n    // eslint-disable-next-line\r\n  }, [currentChat?._id]);\r\n\r\n  const loadMoreMessages = async () => {\r\n    const [data] = await fetchMessages({\r\n      skip: pageCount.current,\r\n      limit: 30,\r\n      conversationId: pageState.current.conversationId,\r\n    });\r\n    setMessages((p) => [...p, ...data]);\r\n  };\r\n\r\n  const handleObserver = useCallback((entries) => {\r\n    const [target] = entries;\r\n    if (target.isIntersecting && !pageState.current.loading) {\r\n      const count = pageCount.current;\r\n      if (totalPages.current !== count) {\r\n        pageCount.current = count + 1;\r\n        loadMoreMessages();\r\n      }\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const option = { root: null, rootMargin: \"30px\", threshold: 0 };\r\n    const observer = new IntersectionObserver(handleObserver, option);\r\n    if (topEndRef.current) observer.observe(topEndRef.current);\r\n\r\n    return () => {\r\n      // eslint-disable-next-line\r\n      if (topEndRef.current) observer.unobserve(topEndRef.current);\r\n    };\r\n  }, [handleObserver]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(incomingMessage).length)\r\n      setMessages((prev) => [\r\n        {\r\n          ...incomingMessage,\r\n          _id: Date.now(),\r\n          conversationId: currentChat._id,\r\n        },\r\n        ...prev,\r\n      ]);\r\n    // eslint-disable-next-line\r\n  }, [incomingMessage]);\r\n\r\n  useEffect(() => {\r\n    if (socket.connected) {\r\n      socket.on(\"user_disconnect\", (data) => {\r\n        const recId = pageState.current.receiverId;\r\n        const isCurrentUserChat = data.offline === recId;\r\n        setJustLeaved({ status: isCurrentUserChat, lastSeen: Date.now() });\r\n        if (isCurrentUserChat) setIsOnline(false);\r\n      });\r\n      socket.on(\"user_status\", (data) => {\r\n        const isCurrentUserChat = data.online === pageState.current.receiverId;\r\n        if (isCurrentUserChat) setIsOnline(true);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (socket?.connected) socket.off(\"user_disconnect\");\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [socket.connected]);\r\n\r\n  const updateLoading = (value) => {\r\n    setLoading(value);\r\n    setPageState({ loading: value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!currentChat?._id) return;\r\n    (async () => {\r\n      try {\r\n        socket.emit(\"user_status\", { id: receiverId }, ({ response }) => {\r\n          setIsOnline(response?.online);\r\n          // if (response && !response?.online)\r\n          //   setJustLeaved({ status: false, lastSeen: currentChat?.lastSeen });\r\n        });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    })();\r\n    return () => socket.emit(\"remove_tracker\", { id: receiverId }, () => {});\r\n    // eslint-disable-next-line\r\n  }, [currentChat?._id, socket.connected]);\r\n\r\n  const emitMessage = (msgData) => {\r\n    return new Promise((resolve) => {\r\n      if (socket.connected) socket.emit(\"message\", msgData, resolve);\r\n      else resolve({ response: { sent: false } });\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (text) => {\r\n    if (!text.trim()) return;\r\n    const message = {\r\n      sender: user.userId,\r\n      text: text,\r\n      conversationId: currentChat._id,\r\n      createdAt: Date.now(),\r\n      receiver: receiverId,\r\n    };\r\n    onSent(message);\r\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n\r\n    const promise = emitMessage({\r\n      ...message,\r\n      profilepicture: user?.profilepicture,\r\n      username: user?.username,\r\n    });\r\n\r\n    try {\r\n      setMessages((prev) => [\r\n        { ...message, _id: Date.now(), promise },\r\n        ...prev,\r\n      ]);\r\n      await BASE_URL.post(\"/messages\", message);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const userStatus = () => {\r\n    return isOnline\r\n      ? \"online\"\r\n      : `Last seen ${\r\n          justLeaved.status\r\n            ? Utils.formatDate(justLeaved?.lastSeen)\r\n            : Utils.formatDate(currentChat?.lastSeen)\r\n        }`;\r\n  };\r\n\r\n  const showSent = (msg, idx) => {\r\n    return (\r\n      msg?.sender === user?.userId &&\r\n      !!msg?.promise &&\r\n      messages[idx]?._id === msg?._id\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentChat && (\r\n        <div className=\"flex items-center md:px-5 px-2 py-1.5 bg-gray-20\">\r\n          <button className=\"px-1.5\">\r\n            <ArrowBack onClick={onClose} />\r\n          </button>\r\n          <Link\r\n            className=\"flex gap-4 items-center\"\r\n            to={`/profile/${currentChat?.username}`}\r\n          >\r\n            <img\r\n              className=\"w-10 h-10 object-cover rounded-full\"\r\n              src={currentChat?.profilepicture || DEFAULT_AVATAR}\r\n              alt=\"\"\r\n            />\r\n            <div className=\"font-medium\">\r\n              <div className=\"md:text-lg font-semibold text-base\">\r\n                {currentChat?.username}\r\n              </div>\r\n              <div className=\"md:text-sm text-xs\">{userStatus()}</div>\r\n            </div>\r\n          </Link>\r\n        </div>\r\n      )}\r\n      {loading && (\r\n        <div className=\"h-10 w-10 absolute top-20 right-0 left-0 mx-auto shadow-md p-1 rounded-full\">\r\n          <div className=\"circle-loader\"></div>\r\n        </div>\r\n      )}\r\n      <div className=\"h-full overflow-y-auto px-2.5 my-4 custom-scrollbar flex flex-col-reverse\">\r\n        <div ref={scrollRef}></div>\r\n        {messages.map((m, idx) => (\r\n          <div className=\"px-4\" key={m._id}>\r\n            <Message\r\n              showSent={showSent(m, idx)}\r\n              message={m}\r\n              own={m.sender === user.userId}\r\n            />\r\n          </div>\r\n        ))}\r\n        <div ref={topEndRef}></div>\r\n        <div className=\"text-center rounded bg-white text-xs text-darkGray-20 border py-2.5 border-gray-120 mx-10\">\r\n          Do not share any personal information in chat because I'm watching you\r\n        </div>\r\n      </div>\r\n      <InputField onSubmit={handleSubmit} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Conversations;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nexport default function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport Conversation from \"../../components/conversations/Conversation\";\r\nimport BASE_URL from \"../../api/baseUrl\";\r\nimport Loader from \"../../common/components/loader\";\r\nimport Conversations from \"./Conversations\";\r\nimport { connect } from \"react-redux\";\r\nimport { subscribe, unsubscribe } from \"../../services/events\";\r\nimport { APP_NAME } from \"../../constants/constants\";\r\n\r\nfunction Chatapp({ socket, user }) {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [incomingMessage, setIncomingMessage] = useState({});\r\n\r\n  const convRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    document.title = `${APP_NAME} | Chat`;\r\n  }, []);\r\n\r\n  const addSortConversations = ({ conversationId, text, sender }) => {\r\n    setConversations((prev) => {\r\n      const temp = prev.map((i) =>\r\n        conversationId === i?._id ? { ...i, text, sender: sender } : i\r\n      );\r\n      return temp.sort((x, y) =>\r\n        conversationId === x?._id ? -1 : conversationId === y?._id ? 1 : 0\r\n      );\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onMessage = ({ detail }) => {\r\n      addSortConversations(detail);\r\n      if (convRef?.current?.includes(detail?.sender)) {\r\n        setIncomingMessage(detail);\r\n      }\r\n    };\r\n\r\n    subscribe(\"message\", onMessage);\r\n    return () => {\r\n      unsubscribe(\"message\", onMessage);\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const { data } = await BASE_URL.get(\"/conversations/\" + user.userId);\r\n        setConversations(data);\r\n      } catch (err) {\r\n        console.log(err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, [user.userId]);\r\n\r\n  const updateChat = (data) => {\r\n    setCurrentChat(data);\r\n    convRef.current = !!data ? data?.members : [];\r\n  };\r\n\r\n  if (isLoading) return <Loader />;\r\n\r\n  if (!!conversations.length) {\r\n    return (\r\n      <div className=\"flex bg-gray-110 w-full max-w-360 mx-auto\">\r\n        <div\r\n          className={`md:sticky fixed md:block z-10 bg-white overflow-y-auto w-full flex-[3] h-screen-cal-55 custom-scrollbar ${\r\n            !currentChat ? \"block\" : \"hidden\"\r\n          }`}\r\n        >\r\n          <div className=\"h-full\">\r\n            {conversations.map((c) => (\r\n              <Conversation\r\n                key={c._id}\r\n                onSelect={updateChat}\r\n                isActive={c?._id === currentChat?._id}\r\n                conversation={c}\r\n                currentUser={user}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"sticky w-full flex-[7] h-screen-cal-55\">\r\n          <div className=\"flex flex-col justify-between relative w-full h-full\">\r\n            {currentChat ? (\r\n              <Conversations\r\n                user={user}\r\n                socket={socket}\r\n                incomingMessage={incomingMessage}\r\n                onSent={addSortConversations}\r\n                receiverId={currentChat?.members.find((i) => i !== user.userId)}\r\n                currentChat={currentChat}\r\n                onClose={() => updateChat(null)}\r\n              />\r\n            ) : (\r\n              <span className=\"grid place-content-center h-full text-ft50-60 text-darkGray-20 text-center\">\r\n                Open a conversation to start a chat.\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col justify-center mt-32\">\r\n      <div className=\"m-auto font-semibold text-gray-110 mb-2\">No Friends</div>\r\n      <div className=\"mx-auto\">Follow a Friend To Start Conversation</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  socket: state.socket.socket,\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Chatapp);\r\n","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');"],"names":["conv","curtUserId","conversation","currentUser","isActive","onSelect","useState","user","setUser","useEffect","friendId","members","find","m","userId","BASE_URL","params","data","response","console","log","onClick","_id","className","src","profilepicture","DEFAULT_AVATAR","alt","username","text","sender","createSvgIcon","React","d","Message","date","message","own","showSent","isSent","setIsSent","promise","then","r","sent","createdAt","Date","toLocaleDateString","moment","format","DoneAll","fontSize","memo","onSubmit","value","setValue","handleSubmit","e","preventDefault","placeholder","onChange","target","type","Send","props","onClose","currentChat","receiverId","incomingMessage","onSent","socket","isOnline","setIsOnline","messages","setMessages","status","lastSeen","justLeaved","setJustLeaved","loading","setLoading","prevConvId","ref","useRef","current","usePrevious","topEndRef","scrollRef","pageState","total","page","conversationId","setPageState","obj","window","chatId","totalPages","pageCount","fetchMessages","updateLoading","error","skip","limit","loadMoreMessages","p","handleObserver","useCallback","entries","isIntersecting","count","observer","IntersectionObserver","root","rootMargin","threshold","observe","unobserve","Object","keys","length","prev","now","connected","on","recId","isCurrentUserChat","offline","online","off","emit","id","err","emitMessage","msgData","Promise","resolve","trim","receiver","scrollIntoView","behavior","block","msg","idx","ArrowBack","to","Utils","map","connect","state","conversations","setConversations","setCurrentChat","isLoading","setIsLoading","setIncomingMessage","convRef","document","title","APP_NAME","addSortConversations","i","sort","x","y","onMessage","detail","includes","subscribe","unsubscribe","updateChat","c"],"sourceRoot":""}